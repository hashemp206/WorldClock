//
//  ClockStyleKit.swift
//  WorldClock
//
//  Created by Hashem Aboonajmi on 7/22/16.
//  Copyright (c) 2016 Aboonajmi. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class ClockStyleKit : NSObject {
    
    static var daylightProgress: CGFloat = 0.0
    //// Cache
    private struct Cache {
        static var numbersColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var hourHandColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var minuteHandColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var lightHandColor: UIColor = UIColor(red: 0.320, green: 0.800, blue: 0.638, alpha: 1.000)
        static var rimColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var tickColor: UIColor = UIColor(red: 0.668, green: 0.668, blue: 0.668, alpha: 1.000)
        static var faceColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        
        static var nightFaceColor: UIColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        static var nightNumbersColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var nightHourHandColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var nightMinuteHandColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        static var nightRimColor: UIColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
    }

    //// Colors

    public class var numbersColor: UIColor { return Cache.numbersColor.interpolateRGBColorTo(nightNumbersColor, fraction: daylightProgress) }
    
    public class var hourHandColor: UIColor { return Cache.hourHandColor.interpolateRGBColorTo(nightHourHandColor, fraction: daylightProgress) }
    
    public class var minuteHandColor: UIColor { return Cache.minuteHandColor.interpolateRGBColorTo(nightMinuteHandColor, fraction: daylightProgress) }
    
    public class var rimColor: UIColor { return Cache.rimColor.interpolateRGBColorTo(nightRimColor, fraction: daylightProgress) }
    
    public class var faceColor: UIColor { return Cache.faceColor.interpolateRGBColorTo(nightFaceColor, fraction: daylightProgress) }
    
    public class var lightHandColor: UIColor { return Cache.lightHandColor }
    public class var tickColor: UIColor { return Cache.tickColor }
    public class var nightFaceColor: UIColor { return Cache.nightFaceColor }
    public class var nightNumbersColor: UIColor { return Cache.nightNumbersColor }
    public class var nightHourHandColor: UIColor { return Cache.nightHourHandColor }
    public class var nightMinuteHandColor: UIColor { return Cache.nightMinuteHandColor }
    public class var nightRimColor: UIColor { return Cache.nightRimColor }

    
    //// Drawing Methods
    public class func drawClock(hours hours: CGFloat, minutes: CGFloat, seconds: CGFloat, daylightProgress aDaylightProgress: CGFloat) {
        
        daylightProgress = aDaylightProgress
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()


        //// Variable Declarations
        let expression = hours > 12 ? "PM" : "AM"
        let secondsAngle: CGFloat = -seconds / 60.0 * 360
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360 - secondsAngle / 60.0)
        let hourAngle: CGFloat = -hours / 12.0 * 360 + minuteAngle / 12.0

        //// Oval 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)

        let oval2Path = UIBezierPath(ovalInRect: CGRectMake(-116, -116, 232, 232))
        ClockStyleKit.rimColor.setFill()
        oval2Path.fill()

        CGContextRestoreGState(context)


        //// Oval Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)

        let ovalPath = UIBezierPath(ovalInRect: CGRectMake(-110, -110, 220, 220))
        ClockStyleKit.faceColor.setFill()
        ovalPath.fill()

        CGContextRestoreGState(context)


        //// Text Drawing
        let textPath = UIBezierPath()
        textPath.moveToPoint(CGPointMake(109.72, 24.95))
        textPath.addLineToPoint(CGPointMake(106.22, 27.82))
        textPath.addLineToPoint(CGPointMake(104.47, 25.75))
        textPath.addLineToPoint(CGPointMake(110, 21.3))
        textPath.addLineToPoint(CGPointMake(112.72, 21.3))
        textPath.addLineToPoint(CGPointMake(112.72, 39))
        textPath.addLineToPoint(CGPointMake(109.72, 39))
        textPath.addLineToPoint(CGPointMake(109.72, 24.95))
        textPath.closePath()
        textPath.moveToPoint(CGPointMake(116.72, 36.25))
        textPath.addLineToPoint(CGPointMake(123.55, 29.55))
        textPath.addCurveToPoint(CGPointMake(124.86, 27.94), controlPoint1: CGPointMake(124.1, 29.02), controlPoint2: CGPointMake(124.54, 28.48))
        textPath.addCurveToPoint(CGPointMake(125.35, 26.07), controlPoint1: CGPointMake(125.19, 27.4), controlPoint2: CGPointMake(125.35, 26.78))
        textPath.addCurveToPoint(CGPointMake(124.54, 24.09), controlPoint1: CGPointMake(125.35, 25.24), controlPoint2: CGPointMake(125.08, 24.58))
        textPath.addCurveToPoint(CGPointMake(122.53, 23.35), controlPoint1: CGPointMake(124, 23.6), controlPoint2: CGPointMake(123.33, 23.35))
        textPath.addCurveToPoint(CGPointMake(120.47, 24.21), controlPoint1: CGPointMake(121.67, 23.35), controlPoint2: CGPointMake(120.99, 23.64))
        textPath.addCurveToPoint(CGPointMake(119.53, 26.38), controlPoint1: CGPointMake(119.96, 24.79), controlPoint2: CGPointMake(119.64, 25.51))
        textPath.addLineToPoint(CGPointMake(116.6, 25.93))
        textPath.addCurveToPoint(CGPointMake(117.22, 23.9), controlPoint1: CGPointMake(116.68, 25.19), controlPoint2: CGPointMake(116.89, 24.52))
        textPath.addCurveToPoint(CGPointMake(118.5, 22.3), controlPoint1: CGPointMake(117.56, 23.28), controlPoint2: CGPointMake(117.98, 22.75))
        textPath.addCurveToPoint(CGPointMake(120.31, 21.24), controlPoint1: CGPointMake(119.02, 21.85), controlPoint2: CGPointMake(119.62, 21.5))
        textPath.addCurveToPoint(CGPointMake(122.57, 20.85), controlPoint1: CGPointMake(121, 20.98), controlPoint2: CGPointMake(121.76, 20.85))
        textPath.addCurveToPoint(CGPointMake(124.79, 21.18), controlPoint1: CGPointMake(123.34, 20.85), controlPoint2: CGPointMake(124.08, 20.96))
        textPath.addCurveToPoint(CGPointMake(126.68, 22.16), controlPoint1: CGPointMake(125.5, 21.39), controlPoint2: CGPointMake(126.12, 21.72))
        textPath.addCurveToPoint(CGPointMake(127.99, 23.79), controlPoint1: CGPointMake(127.23, 22.6), controlPoint2: CGPointMake(127.66, 23.15))
        textPath.addCurveToPoint(CGPointMake(128.47, 26.03), controlPoint1: CGPointMake(128.31, 24.43), controlPoint2: CGPointMake(128.47, 25.17))
        textPath.addCurveToPoint(CGPointMake(128.25, 27.61), controlPoint1: CGPointMake(128.47, 26.59), controlPoint2: CGPointMake(128.4, 27.12))
        textPath.addCurveToPoint(CGPointMake(127.64, 29), controlPoint1: CGPointMake(128.1, 28.1), controlPoint2: CGPointMake(127.9, 28.57))
        textPath.addCurveToPoint(CGPointMake(126.74, 30.24), controlPoint1: CGPointMake(127.38, 29.43), controlPoint2: CGPointMake(127.08, 29.85))
        textPath.addCurveToPoint(CGPointMake(125.62, 31.38), controlPoint1: CGPointMake(126.4, 30.63), controlPoint2: CGPointMake(126.03, 31.01))
        textPath.addLineToPoint(CGPointMake(120.53, 36.25))
        textPath.addLineToPoint(CGPointMake(128.5, 36.25))
        textPath.addLineToPoint(CGPointMake(128.5, 39))
        textPath.addLineToPoint(CGPointMake(116.72, 39))
        textPath.addLineToPoint(CGPointMake(116.72, 36.25))
        textPath.closePath()
        ClockStyleKit.numbersColor.setFill()
        textPath.fill()


        //// Bezier Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -(minuteAngle + 90) * CGFloat(M_PI) / 180)

        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(7.07, -7.07))
        bezierPath.addCurveToPoint(CGPointMake(9.54, -3), controlPoint1: CGPointMake(8.25, -5.89), controlPoint2: CGPointMake(9.07, -4.49))
        bezierPath.addLineToPoint(CGPointMake(95, -3))
        bezierPath.addLineToPoint(CGPointMake(95, 3))
        bezierPath.addLineToPoint(CGPointMake(9.54, 3))
        bezierPath.addCurveToPoint(CGPointMake(7.07, 7.07), controlPoint1: CGPointMake(9.07, 4.49), controlPoint2: CGPointMake(8.25, 5.89))
        bezierPath.addCurveToPoint(CGPointMake(-7.07, 7.07), controlPoint1: CGPointMake(3.17, 10.98), controlPoint2: CGPointMake(-3.17, 10.98))
        bezierPath.addCurveToPoint(CGPointMake(-7.07, -7.07), controlPoint1: CGPointMake(-10.98, 3.17), controlPoint2: CGPointMake(-10.98, -3.17))
        bezierPath.addCurveToPoint(CGPointMake(7.07, -7.07), controlPoint1: CGPointMake(-3.17, -10.98), controlPoint2: CGPointMake(3.17, -10.98))
        bezierPath.closePath()
        ClockStyleKit.minuteHandColor.setFill()
        bezierPath.fill()

        CGContextRestoreGState(context)


        //// Bezier 2 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -(hourAngle + 90) * CGFloat(M_PI) / 180)

        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(7.07, -7.07))
        bezier2Path.addCurveToPoint(CGPointMake(8.66, -5), controlPoint1: CGPointMake(7.7, -6.44), controlPoint2: CGPointMake(8.24, -5.74))
        bezier2Path.addLineToPoint(CGPointMake(56, -5))
        bezier2Path.addLineToPoint(CGPointMake(56, 5))
        bezier2Path.addLineToPoint(CGPointMake(8.66, 5))
        bezier2Path.addCurveToPoint(CGPointMake(7.07, 7.07), controlPoint1: CGPointMake(8.24, 5.74), controlPoint2: CGPointMake(7.7, 6.44))
        bezier2Path.addCurveToPoint(CGPointMake(-7.07, 7.07), controlPoint1: CGPointMake(3.17, 10.98), controlPoint2: CGPointMake(-3.17, 10.98))
        bezier2Path.addCurveToPoint(CGPointMake(-7.07, -7.07), controlPoint1: CGPointMake(-10.98, 3.17), controlPoint2: CGPointMake(-10.98, -3.17))
        bezier2Path.addCurveToPoint(CGPointMake(7.07, -7.07), controlPoint1: CGPointMake(-3.17, -10.98), controlPoint2: CGPointMake(3.17, -10.98))
        bezier2Path.closePath()
        ClockStyleKit.hourHandColor.setFill()
        bezier2Path.fill()

        CGContextRestoreGState(context)


        //// Bezier 3 Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -(secondsAngle + 90) * CGFloat(M_PI) / 180)

        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(4.24, -4.24))
        bezier3Path.addCurveToPoint(CGPointMake(5.92, -1), controlPoint1: CGPointMake(5.16, -3.33), controlPoint2: CGPointMake(5.72, -2.19))
        bezier3Path.addLineToPoint(CGPointMake(99, -1))
        bezier3Path.addLineToPoint(CGPointMake(99, 1))
        bezier3Path.addLineToPoint(CGPointMake(5.92, 1))
        bezier3Path.addCurveToPoint(CGPointMake(4.24, 4.24), controlPoint1: CGPointMake(5.72, 2.19), controlPoint2: CGPointMake(5.16, 3.33))
        bezier3Path.addCurveToPoint(CGPointMake(-4.24, 4.24), controlPoint1: CGPointMake(1.9, 6.59), controlPoint2: CGPointMake(-1.9, 6.59))
        bezier3Path.addCurveToPoint(CGPointMake(-4.24, -4.24), controlPoint1: CGPointMake(-6.59, 1.9), controlPoint2: CGPointMake(-6.59, -1.9))
        bezier3Path.addCurveToPoint(CGPointMake(4.24, -4.24), controlPoint1: CGPointMake(-1.9, -6.59), controlPoint2: CGPointMake(1.9, -6.59))
        bezier3Path.closePath()
        ClockStyleKit.lightHandColor.setFill()
        bezier3Path.fill()

        CGContextRestoreGState(context)


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(113, 6, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRectMake(113, 218, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle2Path.fill()




        //// Group 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, 90 * CGFloat(M_PI) / 180)



        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle4Path.fill()



        CGContextRestoreGState(context)


        //// Group 3
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -30 * CGFloat(M_PI) / 180)



        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle6Path.fill()



        CGContextRestoreGState(context)


        //// Group 4
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -60 * CGFloat(M_PI) / 180)



        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle7Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle8Path.fill()



        CGContextRestoreGState(context)


        //// Group 5
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -120 * CGFloat(M_PI) / 180)



        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle10Path.fill()



        CGContextRestoreGState(context)


        //// Group 6
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 116, 116)
        CGContextRotateCTM(context, -150 * CGFloat(M_PI) / 180)



        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRectMake(-3, -110, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle11Path.fill()


        //// Rectangle 12 Drawing
        let rectangle12Path = UIBezierPath(rect: CGRectMake(-3, 102, 6, 8))
        ClockStyleKit.tickColor.setFill()
        rectangle12Path.fill()



        CGContextRestoreGState(context)


        //// Text 2 Drawing
        let text2Rect = CGRectMake(97, 184, 38, 40)
        let text2TextContent = NSString(string: "6")
        let text2Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text2Style.alignment = NSTextAlignment.Center

        let text2FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: ClockStyleKit.numbersColor, NSParagraphStyleAttributeName: text2Style]

        let text2TextHeight: CGFloat = text2TextContent.boundingRectWithSize(CGSizeMake(text2Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text2Rect);
        text2TextContent.drawInRect(CGRectMake(text2Rect.minX, text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, text2Rect.width, text2TextHeight), withAttributes: text2FontAttributes)
        CGContextRestoreGState(context)


        //// Text 3 Drawing
        let text3Rect = CGRectMake(187, 96, 38, 40)
        let text3TextContent = NSString(string: "3")
        let text3Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text3Style.alignment = NSTextAlignment.Center

        let text3FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: ClockStyleKit.numbersColor, NSParagraphStyleAttributeName: text3Style]

        let text3TextHeight: CGFloat = text3TextContent.boundingRectWithSize(CGSizeMake(text3Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text3Rect);
        text3TextContent.drawInRect(CGRectMake(text3Rect.minX, text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, text3Rect.width, text3TextHeight), withAttributes: text3FontAttributes)
        CGContextRestoreGState(context)


        //// Text 4 Drawing
        let text4Rect = CGRectMake(8, 96, 38, 40)
        let text4TextContent = NSString(string: "9")
        let text4Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text4Style.alignment = NSTextAlignment.Center

        let text4FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 25)!, NSForegroundColorAttributeName: ClockStyleKit.numbersColor, NSParagraphStyleAttributeName: text4Style]

        let text4TextHeight: CGFloat = text4TextContent.boundingRectWithSize(CGSizeMake(text4Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text4Rect);
        text4TextContent.drawInRect(CGRectMake(text4Rect.minX, text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, text4Rect.width, text4TextHeight), withAttributes: text4FontAttributes)
        CGContextRestoreGState(context)


        //// Text 13 Drawing
        let text13Rect = CGRectMake(85, 130, 62, 34)
        let text13Style = NSParagraphStyle.defaultParagraphStyle().mutableCopy() as! NSMutableParagraphStyle
        text13Style.alignment = NSTextAlignment.Center

        let text13FontAttributes = [NSFontAttributeName: UIFont(name: "AvenirNext-DemiBold", size: 20)!, NSForegroundColorAttributeName: ClockStyleKit.numbersColor, NSParagraphStyleAttributeName: text13Style]

        let text13TextHeight: CGFloat = NSString(string: expression).boundingRectWithSize(CGSizeMake(text13Rect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: text13FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, text13Rect);
        NSString(string: expression).drawInRect(CGRectMake(text13Rect.minX, text13Rect.minY + (text13Rect.height - text13TextHeight) / 2, text13Rect.width, text13TextHeight), withAttributes: text13FontAttributes)
        CGContextRestoreGState(context)
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
